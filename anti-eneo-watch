#!/bin/bash

# Default debounce is 1 minute (60 seconds)
DEBOUNCE=60

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --debounce=*)
            DEBOUNCE="${1#*=}"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: anti-eneo-watch [--debounce=X]"
            echo "  --debounce=X  Set the debounce time in seconds (default: 60)"
            exit 1
            ;;
    esac
done

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Get current branch
CURRENT_BRANCH=$(git branch --show-current)

# If not on anti-eneo branch, create and checkout to it
if [ "$CURRENT_BRANCH" != "anti-eneo" ]; then
    echo "Creating and switching to anti-eneo branch..."
    
    # Check if anti-eneo branch exists
    if git show-ref --verify --quiet refs/heads/anti-eneo; then
        git checkout anti-eneo
    else
        git checkout -b anti-eneo
    fi
fi

echo "Anti-Eneo Watch started. Watching for file changes..."
echo "Debounce time: $DEBOUNCE seconds"
echo "Press Ctrl+C to stop"

# Function to commit and push changes
commit_and_push() {
    echo "[$(date)] Committing changes..."
    
    # Commit changes
    git commit -am "periodic changes" 2>&1 | tee /tmp/anti-eneo-commit.log
    
    # Check if a commit was made
    if grep -q "nothing to commit" /tmp/anti-eneo-commit.log; then
        echo "[$(date)] No changes to commit"
    else
        echo "[$(date)] Pushing changes to anti-eneo branch..."
        git push origin anti-eneo
    fi
}

# Get the git root directory
GIT_ROOT=$(git rev-parse --show-toplevel)

# Create a temporary file to track the last change time
LAST_CHANGE_FILE="/tmp/anti-eneo-last-change-$$"
touch "$LAST_CHANGE_FILE"

# Function to handle file changes
handle_change() {
    echo "[$(date)] File change detected"
    date +%s > "$LAST_CHANGE_FILE"
}

# Watch for changes using git status
while true; do
    # Check if there are any changes to tracked files
    if ! git diff --quiet || ! git diff --cached --quiet; then
        handle_change
        
        # Wait for debounce period
        sleep "$DEBOUNCE"
        
        # Check if any new changes occurred during debounce
        LAST_CHANGE=$(cat "$LAST_CHANGE_FILE" 2>/dev/null || echo 0)
        CURRENT_TIME=$(date +%s)
        TIME_DIFF=$((CURRENT_TIME - LAST_CHANGE))
        
        # If no new changes during debounce period, commit
        if [ "$TIME_DIFF" -ge "$DEBOUNCE" ]; then
            commit_and_push
        fi
    fi
    
    # Small sleep to avoid excessive CPU usage
    sleep 1
done

# Cleanup on exit
trap "rm -f $LAST_CHANGE_FILE" EXIT